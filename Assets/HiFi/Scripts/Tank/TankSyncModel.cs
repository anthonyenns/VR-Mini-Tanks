using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class TankSyncModel
{
    [RealtimeProperty(1, false)] private float _trackLeftSpeed;
    [RealtimeProperty(2, false)] private float _trackRightSpeed;
    [RealtimeProperty(3, false)] private float _gunAngle;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class TankSyncModel : IModel {
    // Properties
    public float trackLeftSpeed {
        get { return _trackLeftSpeed; }
        set { if (value == _trackLeftSpeed) return; _trackLeftSpeedShouldWrite = true; _trackLeftSpeed = value; }
    }
    public float trackRightSpeed {
        get { return _trackRightSpeed; }
        set { if (value == _trackRightSpeed) return; _trackRightSpeedShouldWrite = true; _trackRightSpeed = value; }
    }
    public float gunAngle {
        get { return _gunAngle; }
        set { if (value == _gunAngle) return; _gunAngleShouldWrite = true; _gunAngle = value; }
    }
    
    private bool _trackLeftSpeedShouldWrite;
    private bool _trackRightSpeedShouldWrite;
    private bool _gunAngleShouldWrite;
    
    public TankSyncModel() {
    }
    
    // Serialization
    enum PropertyID {
        TrackLeftSpeed = 1,
        TrackRightSpeed = 2,
        GunAngle = 3,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.TrackLeftSpeed);
            length += WriteStream.WriteFloatLength((uint)PropertyID.TrackRightSpeed);
            length += WriteStream.WriteFloatLength((uint)PropertyID.GunAngle);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_trackLeftSpeedShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.TrackLeftSpeed);
                }
                if (_trackRightSpeedShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.TrackRightSpeed);
                }
                if (_gunAngleShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.GunAngle);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.TrackLeftSpeed, _trackLeftSpeed);
            _trackLeftSpeedShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.TrackRightSpeed, _trackRightSpeed);
            _trackRightSpeedShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.GunAngle, _gunAngle);
            _gunAngleShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_trackLeftSpeedShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.TrackLeftSpeed, _trackLeftSpeed);
                    _trackLeftSpeedShouldWrite = false;
                }
                if (_trackRightSpeedShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.TrackRightSpeed, _trackRightSpeed);
                    _trackRightSpeedShouldWrite = false;
                }
                if (_gunAngleShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.GunAngle, _gunAngle);
                    _gunAngleShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.TrackLeftSpeed: {
                    _trackLeftSpeed = stream.ReadFloat();
                    _trackLeftSpeedShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.TrackRightSpeed: {
                    _trackRightSpeed = stream.ReadFloat();
                    _trackRightSpeedShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.GunAngle: {
                    _gunAngle = stream.ReadFloat();
                    _gunAngleShouldWrite = false;
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
